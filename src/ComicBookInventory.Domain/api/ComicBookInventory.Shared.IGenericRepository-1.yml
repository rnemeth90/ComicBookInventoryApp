### YamlMime:ManagedReference
items:
- uid: ComicBookInventory.Shared.IGenericRepository`1
  commentId: T:ComicBookInventory.Shared.IGenericRepository`1
  id: IGenericRepository`1
  parent: ComicBookInventory.Shared
  children:
  - ComicBookInventory.Shared.IGenericRepository`1.Add(`0)
  - ComicBookInventory.Shared.IGenericRepository`1.AddRange(IEnumerable{`0})
  - ComicBookInventory.Shared.IGenericRepository`1.Find(System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  - ComicBookInventory.Shared.IGenericRepository`1.GetAll
  - ComicBookInventory.Shared.IGenericRepository`1.GetWhere(System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  - ComicBookInventory.Shared.IGenericRepository`1.Remove(`0)
  - ComicBookInventory.Shared.IGenericRepository`1.RemoveById(System.Int32)
  - ComicBookInventory.Shared.IGenericRepository`1.RemoveRange(IEnumerable{`0})
  - ComicBookInventory.Shared.IGenericRepository`1.RemoveWhere(System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  - ComicBookInventory.Shared.IGenericRepository`1.Update(`0)
  - ComicBookInventory.Shared.IGenericRepository`1.UpdateRange(IEnumerable{`0})
  langs:
  - csharp
  - vb
  name: IGenericRepository<T>
  nameWithType: IGenericRepository<T>
  fullName: ComicBookInventory.Shared.IGenericRepository<T>
  type: Interface
  source:
    remote:
      path: src/ComicBookInventory.Domain/Interfaces/IGenericRepository.cs
      branch: wip/extend-character-model
      repo: git@github.com:rnemeth90/ComicBookInventoryApp.git
    id: IGenericRepository
    path: Interfaces/IGenericRepository.cs
    startLine: 4
  assemblies:
  - ComicBookInventory.Domain
  namespace: ComicBookInventory.Shared
  syntax:
    content: >-
      public interface IGenericRepository<T>
          where T : class
    typeParameters:
    - id: T
    content.vb: Public Interface IGenericRepository(Of T As Class)
  nameWithType.vb: IGenericRepository(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T)
  name.vb: IGenericRepository(Of T)
- uid: ComicBookInventory.Shared.IGenericRepository`1.GetAll
  commentId: M:ComicBookInventory.Shared.IGenericRepository`1.GetAll
  id: GetAll
  parent: ComicBookInventory.Shared.IGenericRepository`1
  langs:
  - csharp
  - vb
  name: GetAll()
  nameWithType: IGenericRepository<T>.GetAll()
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.GetAll()
  type: Method
  source:
    remote:
      path: src/ComicBookInventory.Domain/Interfaces/IGenericRepository.cs
      branch: wip/extend-character-model
      repo: git@github.com:rnemeth90/ComicBookInventoryApp.git
    id: GetAll
    path: Interfaces/IGenericRepository.cs
    startLine: 6
  assemblies:
  - ComicBookInventory.Domain
  namespace: ComicBookInventory.Shared
  syntax:
    content: IEnumerable<T> GetAll()
    return:
      type: IEnumerable{{T}}
    content.vb: Function GetAll As IEnumerable(Of T)
  overload: ComicBookInventory.Shared.IGenericRepository`1.GetAll*
  nameWithType.vb: IGenericRepository(Of T).GetAll()
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).GetAll()
- uid: ComicBookInventory.Shared.IGenericRepository`1.GetWhere(System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  commentId: M:ComicBookInventory.Shared.IGenericRepository`1.GetWhere(System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  id: GetWhere(System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  parent: ComicBookInventory.Shared.IGenericRepository`1
  langs:
  - csharp
  - vb
  name: GetWhere(Expression<Func<T, Boolean>>)
  nameWithType: IGenericRepository<T>.GetWhere(Expression<Func<T, Boolean>>)
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.GetWhere(System.Linq.Expressions.Expression<Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/ComicBookInventory.Domain/Interfaces/IGenericRepository.cs
      branch: wip/extend-character-model
      repo: git@github.com:rnemeth90/ComicBookInventoryApp.git
    id: GetWhere
    path: Interfaces/IGenericRepository.cs
    startLine: 7
  assemblies:
  - ComicBookInventory.Domain
  namespace: ComicBookInventory.Shared
  syntax:
    content: IEnumerable<T> GetWhere(Expression<Func<T, bool>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{Func{{T},System.Boolean}}
    return:
      type: IEnumerable{{T}}
    content.vb: Function GetWhere(expression As Expression(Of Func(Of T, Boolean))) As IEnumerable(Of T)
  overload: ComicBookInventory.Shared.IGenericRepository`1.GetWhere*
  nameWithType.vb: IGenericRepository(Of T).GetWhere(Expression(Of Func(Of T, Boolean)))
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).GetWhere(System.Linq.Expressions.Expression(Of Func(Of T, System.Boolean)))
  name.vb: GetWhere(Expression(Of Func(Of T, Boolean)))
- uid: ComicBookInventory.Shared.IGenericRepository`1.Find(System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  commentId: M:ComicBookInventory.Shared.IGenericRepository`1.Find(System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  id: Find(System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  parent: ComicBookInventory.Shared.IGenericRepository`1
  langs:
  - csharp
  - vb
  name: Find(Expression<Func<T, Boolean>>)
  nameWithType: IGenericRepository<T>.Find(Expression<Func<T, Boolean>>)
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.Find(System.Linq.Expressions.Expression<Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/ComicBookInventory.Domain/Interfaces/IGenericRepository.cs
      branch: wip/extend-character-model
      repo: git@github.com:rnemeth90/ComicBookInventoryApp.git
    id: Find
    path: Interfaces/IGenericRepository.cs
    startLine: 9
  assemblies:
  - ComicBookInventory.Domain
  namespace: ComicBookInventory.Shared
  syntax:
    content: T Find(Expression<Func<T, bool>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{Func{{T},System.Boolean}}
    return:
      type: '{T}'
    content.vb: Function Find(expression As Expression(Of Func(Of T, Boolean))) As T
  overload: ComicBookInventory.Shared.IGenericRepository`1.Find*
  nameWithType.vb: IGenericRepository(Of T).Find(Expression(Of Func(Of T, Boolean)))
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).Find(System.Linq.Expressions.Expression(Of Func(Of T, System.Boolean)))
  name.vb: Find(Expression(Of Func(Of T, Boolean)))
- uid: ComicBookInventory.Shared.IGenericRepository`1.Add(`0)
  commentId: M:ComicBookInventory.Shared.IGenericRepository`1.Add(`0)
  id: Add(`0)
  parent: ComicBookInventory.Shared.IGenericRepository`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: IGenericRepository<T>.Add(T)
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/ComicBookInventory.Domain/Interfaces/IGenericRepository.cs
      branch: wip/extend-character-model
      repo: git@github.com:rnemeth90/ComicBookInventoryApp.git
    id: Add
    path: Interfaces/IGenericRepository.cs
    startLine: 11
  assemblies:
  - ComicBookInventory.Domain
  namespace: ComicBookInventory.Shared
  syntax:
    content: void Add(T entity)
    parameters:
    - id: entity
      type: '{T}'
    content.vb: Sub Add(entity As T)
  overload: ComicBookInventory.Shared.IGenericRepository`1.Add*
  nameWithType.vb: IGenericRepository(Of T).Add(T)
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).Add(T)
- uid: ComicBookInventory.Shared.IGenericRepository`1.AddRange(IEnumerable{`0})
  commentId: M:ComicBookInventory.Shared.IGenericRepository`1.AddRange(IEnumerable{`0})
  id: AddRange(IEnumerable{`0})
  parent: ComicBookInventory.Shared.IGenericRepository`1
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<T>)
  nameWithType: IGenericRepository<T>.AddRange(IEnumerable<T>)
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.AddRange(IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/ComicBookInventory.Domain/Interfaces/IGenericRepository.cs
      branch: wip/extend-character-model
      repo: git@github.com:rnemeth90/ComicBookInventoryApp.git
    id: AddRange
    path: Interfaces/IGenericRepository.cs
    startLine: 12
  assemblies:
  - ComicBookInventory.Domain
  namespace: ComicBookInventory.Shared
  syntax:
    content: void AddRange(IEnumerable<T> entities)
    parameters:
    - id: entities
      type: IEnumerable{{T}}
    content.vb: Sub AddRange(entities As IEnumerable(Of T))
  overload: ComicBookInventory.Shared.IGenericRepository`1.AddRange*
  nameWithType.vb: IGenericRepository(Of T).AddRange(IEnumerable(Of T))
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).AddRange(IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
- uid: ComicBookInventory.Shared.IGenericRepository`1.Update(`0)
  commentId: M:ComicBookInventory.Shared.IGenericRepository`1.Update(`0)
  id: Update(`0)
  parent: ComicBookInventory.Shared.IGenericRepository`1
  langs:
  - csharp
  - vb
  name: Update(T)
  nameWithType: IGenericRepository<T>.Update(T)
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.Update(T)
  type: Method
  source:
    remote:
      path: src/ComicBookInventory.Domain/Interfaces/IGenericRepository.cs
      branch: wip/extend-character-model
      repo: git@github.com:rnemeth90/ComicBookInventoryApp.git
    id: Update
    path: Interfaces/IGenericRepository.cs
    startLine: 14
  assemblies:
  - ComicBookInventory.Domain
  namespace: ComicBookInventory.Shared
  syntax:
    content: void Update(T entity)
    parameters:
    - id: entity
      type: '{T}'
    content.vb: Sub Update(entity As T)
  overload: ComicBookInventory.Shared.IGenericRepository`1.Update*
  nameWithType.vb: IGenericRepository(Of T).Update(T)
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).Update(T)
- uid: ComicBookInventory.Shared.IGenericRepository`1.UpdateRange(IEnumerable{`0})
  commentId: M:ComicBookInventory.Shared.IGenericRepository`1.UpdateRange(IEnumerable{`0})
  id: UpdateRange(IEnumerable{`0})
  parent: ComicBookInventory.Shared.IGenericRepository`1
  langs:
  - csharp
  - vb
  name: UpdateRange(IEnumerable<T>)
  nameWithType: IGenericRepository<T>.UpdateRange(IEnumerable<T>)
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.UpdateRange(IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/ComicBookInventory.Domain/Interfaces/IGenericRepository.cs
      branch: wip/extend-character-model
      repo: git@github.com:rnemeth90/ComicBookInventoryApp.git
    id: UpdateRange
    path: Interfaces/IGenericRepository.cs
    startLine: 15
  assemblies:
  - ComicBookInventory.Domain
  namespace: ComicBookInventory.Shared
  syntax:
    content: void UpdateRange(IEnumerable<T> entities)
    parameters:
    - id: entities
      type: IEnumerable{{T}}
    content.vb: Sub UpdateRange(entities As IEnumerable(Of T))
  overload: ComicBookInventory.Shared.IGenericRepository`1.UpdateRange*
  nameWithType.vb: IGenericRepository(Of T).UpdateRange(IEnumerable(Of T))
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).UpdateRange(IEnumerable(Of T))
  name.vb: UpdateRange(IEnumerable(Of T))
- uid: ComicBookInventory.Shared.IGenericRepository`1.Remove(`0)
  commentId: M:ComicBookInventory.Shared.IGenericRepository`1.Remove(`0)
  id: Remove(`0)
  parent: ComicBookInventory.Shared.IGenericRepository`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: IGenericRepository<T>.Remove(T)
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/ComicBookInventory.Domain/Interfaces/IGenericRepository.cs
      branch: wip/extend-character-model
      repo: git@github.com:rnemeth90/ComicBookInventoryApp.git
    id: Remove
    path: Interfaces/IGenericRepository.cs
    startLine: 17
  assemblies:
  - ComicBookInventory.Domain
  namespace: ComicBookInventory.Shared
  syntax:
    content: void Remove(T entity)
    parameters:
    - id: entity
      type: '{T}'
    content.vb: Sub Remove(entity As T)
  overload: ComicBookInventory.Shared.IGenericRepository`1.Remove*
  nameWithType.vb: IGenericRepository(Of T).Remove(T)
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).Remove(T)
- uid: ComicBookInventory.Shared.IGenericRepository`1.RemoveById(System.Int32)
  commentId: M:ComicBookInventory.Shared.IGenericRepository`1.RemoveById(System.Int32)
  id: RemoveById(System.Int32)
  parent: ComicBookInventory.Shared.IGenericRepository`1
  langs:
  - csharp
  - vb
  name: RemoveById(Int32)
  nameWithType: IGenericRepository<T>.RemoveById(Int32)
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.RemoveById(System.Int32)
  type: Method
  source:
    remote:
      path: src/ComicBookInventory.Domain/Interfaces/IGenericRepository.cs
      branch: wip/extend-character-model
      repo: git@github.com:rnemeth90/ComicBookInventoryApp.git
    id: RemoveById
    path: Interfaces/IGenericRepository.cs
    startLine: 18
  assemblies:
  - ComicBookInventory.Domain
  namespace: ComicBookInventory.Shared
  syntax:
    content: void RemoveById(int id)
    parameters:
    - id: id
      type: System.Int32
    content.vb: Sub RemoveById(id As Integer)
  overload: ComicBookInventory.Shared.IGenericRepository`1.RemoveById*
  nameWithType.vb: IGenericRepository(Of T).RemoveById(Int32)
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).RemoveById(System.Int32)
- uid: ComicBookInventory.Shared.IGenericRepository`1.RemoveWhere(System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  commentId: M:ComicBookInventory.Shared.IGenericRepository`1.RemoveWhere(System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  id: RemoveWhere(System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  parent: ComicBookInventory.Shared.IGenericRepository`1
  langs:
  - csharp
  - vb
  name: RemoveWhere(Expression<Func<T, Boolean>>)
  nameWithType: IGenericRepository<T>.RemoveWhere(Expression<Func<T, Boolean>>)
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.RemoveWhere(System.Linq.Expressions.Expression<Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/ComicBookInventory.Domain/Interfaces/IGenericRepository.cs
      branch: wip/extend-character-model
      repo: git@github.com:rnemeth90/ComicBookInventoryApp.git
    id: RemoveWhere
    path: Interfaces/IGenericRepository.cs
    startLine: 19
  assemblies:
  - ComicBookInventory.Domain
  namespace: ComicBookInventory.Shared
  syntax:
    content: void RemoveWhere(Expression<Func<T, bool>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{Func{{T},System.Boolean}}
    content.vb: Sub RemoveWhere(expression As Expression(Of Func(Of T, Boolean)))
  overload: ComicBookInventory.Shared.IGenericRepository`1.RemoveWhere*
  nameWithType.vb: IGenericRepository(Of T).RemoveWhere(Expression(Of Func(Of T, Boolean)))
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).RemoveWhere(System.Linq.Expressions.Expression(Of Func(Of T, System.Boolean)))
  name.vb: RemoveWhere(Expression(Of Func(Of T, Boolean)))
- uid: ComicBookInventory.Shared.IGenericRepository`1.RemoveRange(IEnumerable{`0})
  commentId: M:ComicBookInventory.Shared.IGenericRepository`1.RemoveRange(IEnumerable{`0})
  id: RemoveRange(IEnumerable{`0})
  parent: ComicBookInventory.Shared.IGenericRepository`1
  langs:
  - csharp
  - vb
  name: RemoveRange(IEnumerable<T>)
  nameWithType: IGenericRepository<T>.RemoveRange(IEnumerable<T>)
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.RemoveRange(IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/ComicBookInventory.Domain/Interfaces/IGenericRepository.cs
      branch: wip/extend-character-model
      repo: git@github.com:rnemeth90/ComicBookInventoryApp.git
    id: RemoveRange
    path: Interfaces/IGenericRepository.cs
    startLine: 20
  assemblies:
  - ComicBookInventory.Domain
  namespace: ComicBookInventory.Shared
  syntax:
    content: void RemoveRange(IEnumerable<T> entities)
    parameters:
    - id: entities
      type: IEnumerable{{T}}
    content.vb: Sub RemoveRange(entities As IEnumerable(Of T))
  overload: ComicBookInventory.Shared.IGenericRepository`1.RemoveRange*
  nameWithType.vb: IGenericRepository(Of T).RemoveRange(IEnumerable(Of T))
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).RemoveRange(IEnumerable(Of T))
  name.vb: RemoveRange(IEnumerable(Of T))
references:
- uid: ComicBookInventory.Shared
  commentId: N:ComicBookInventory.Shared
  name: ComicBookInventory.Shared
  nameWithType: ComicBookInventory.Shared
  fullName: ComicBookInventory.Shared
- uid: ComicBookInventory.Shared.IGenericRepository`1.GetAll*
  commentId: Overload:ComicBookInventory.Shared.IGenericRepository`1.GetAll
  name: GetAll
  nameWithType: IGenericRepository<T>.GetAll
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.GetAll
  nameWithType.vb: IGenericRepository(Of T).GetAll
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).GetAll
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{`0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ComicBookInventory.Shared.IGenericRepository`1.GetWhere*
  commentId: Overload:ComicBookInventory.Shared.IGenericRepository`1.GetWhere
  name: GetWhere
  nameWithType: IGenericRepository<T>.GetWhere
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.GetWhere
  nameWithType.vb: IGenericRepository(Of T).GetWhere
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).GetWhere
- uid: System.Linq.Expressions.Expression{Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: ComicBookInventory.Shared.IGenericRepository`1.Find*
  commentId: Overload:ComicBookInventory.Shared.IGenericRepository`1.Find
  name: Find
  nameWithType: IGenericRepository<T>.Find
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.Find
  nameWithType.vb: IGenericRepository(Of T).Find
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).Find
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: ComicBookInventory.Shared.IGenericRepository`1.Add*
  commentId: Overload:ComicBookInventory.Shared.IGenericRepository`1.Add
  name: Add
  nameWithType: IGenericRepository<T>.Add
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.Add
  nameWithType.vb: IGenericRepository(Of T).Add
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).Add
- uid: ComicBookInventory.Shared.IGenericRepository`1.AddRange*
  commentId: Overload:ComicBookInventory.Shared.IGenericRepository`1.AddRange
  name: AddRange
  nameWithType: IGenericRepository<T>.AddRange
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.AddRange
  nameWithType.vb: IGenericRepository(Of T).AddRange
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).AddRange
- uid: ComicBookInventory.Shared.IGenericRepository`1.Update*
  commentId: Overload:ComicBookInventory.Shared.IGenericRepository`1.Update
  name: Update
  nameWithType: IGenericRepository<T>.Update
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.Update
  nameWithType.vb: IGenericRepository(Of T).Update
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).Update
- uid: ComicBookInventory.Shared.IGenericRepository`1.UpdateRange*
  commentId: Overload:ComicBookInventory.Shared.IGenericRepository`1.UpdateRange
  name: UpdateRange
  nameWithType: IGenericRepository<T>.UpdateRange
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.UpdateRange
  nameWithType.vb: IGenericRepository(Of T).UpdateRange
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).UpdateRange
- uid: ComicBookInventory.Shared.IGenericRepository`1.Remove*
  commentId: Overload:ComicBookInventory.Shared.IGenericRepository`1.Remove
  name: Remove
  nameWithType: IGenericRepository<T>.Remove
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.Remove
  nameWithType.vb: IGenericRepository(Of T).Remove
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).Remove
- uid: ComicBookInventory.Shared.IGenericRepository`1.RemoveById*
  commentId: Overload:ComicBookInventory.Shared.IGenericRepository`1.RemoveById
  name: RemoveById
  nameWithType: IGenericRepository<T>.RemoveById
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.RemoveById
  nameWithType.vb: IGenericRepository(Of T).RemoveById
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).RemoveById
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: ComicBookInventory.Shared.IGenericRepository`1.RemoveWhere*
  commentId: Overload:ComicBookInventory.Shared.IGenericRepository`1.RemoveWhere
  name: RemoveWhere
  nameWithType: IGenericRepository<T>.RemoveWhere
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.RemoveWhere
  nameWithType.vb: IGenericRepository(Of T).RemoveWhere
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).RemoveWhere
- uid: ComicBookInventory.Shared.IGenericRepository`1.RemoveRange*
  commentId: Overload:ComicBookInventory.Shared.IGenericRepository`1.RemoveRange
  name: RemoveRange
  nameWithType: IGenericRepository<T>.RemoveRange
  fullName: ComicBookInventory.Shared.IGenericRepository<T>.RemoveRange
  nameWithType.vb: IGenericRepository(Of T).RemoveRange
  fullName.vb: ComicBookInventory.Shared.IGenericRepository(Of T).RemoveRange
